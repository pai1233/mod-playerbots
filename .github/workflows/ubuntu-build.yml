name: ubuntu-build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        # the result of the matrix will be the combination of all attributes, so we get os*compiler builds
        include:
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
            
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-${{ matrix.cpp_compiler }}

    steps:
      - name: Checkout AzerothCore
        uses: actions/checkout@v3
        with:
          repository: 'liyunfan1223/azerothcore-wotlk'
          ref: 'Playerbot'

      - name: Checkout eluna Module
        uses: actions/checkout@v3
        with:
          repository: 'azerothcore/mod-eluna'
          path: 'modules/mod-eluna'         
          
      - name: Checkout ah-bot Module
        uses: actions/checkout@v3
        with:
          repository: 'azerothcore/mod-ah-bot'
          path: 'modules/mod-ah-bot'    

      - name: Checkout 1v1-arena Module
        uses: actions/checkout@v3
        with:
          repository: 'azerothcore/mod-1v1-arena'
          path: 'modules/mod-1v1-arena'           

      - name: Checkout boss-announcer Module
        uses: actions/checkout@v3
        with:
          repository: 'azerothcore/mod-boss-announcer'
          path: 'modules/mod-boss-announcer'  
          
      - name: Checkout npc-enchanter Module
        uses: actions/checkout@v3
        with:
          repository: 'azerothcore/mod-npc-enchanter'
          path: 'modules/mod-npc-enchanter'           
          
      - name: Checkout Playerbot Module
        uses: actions/checkout@v3
        with:
          repository: 'liyunfan1223/mod-playerbots'
          path: 'modules/mod-playerbots'
      
      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/var/ccache
          key: ccache:${{ matrix.os }}:${{ matrix.c_compiler }}:${{ github.ref }}:${{ github.sha }}
          restore-keys: |
            ccache:${{ matrix.os }}:${{ matrix.c_compiler }}:${{ github.ref }}
            ccache:${{ matrix.os }}:${{ matrix.c_compiler }}
            ccache:${{ matrix.os }}

      - name: Install Requirements
        run: sudo apt-get update && sudo apt-get install ccache git cmake make gcc g++ clang libmysqlclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev mysql-server libboost-all-dev

      - name: Configure CMake
        run: >
          mkdir /home/azerothuser/azerothcore /home/azerothuser/azerothcore/lib /home/azerothuser/azerothcore/config && 
          cmake -B ${{ steps.strings.outputs.build-output-dir }} 
          -DCMAKE_INSTALL_PREFIX=/home/azerothuser/azerothcore -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_ETCDIR=config
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Install
        run: cmake --install build --config ${{ matrix.build_type }}
        
      - name: Upload AzerothCore
        uses: actions/upload-artifact@v4
        with:
          name: AzerothCore-build
          path: /home/azerothuser/azerothcore
